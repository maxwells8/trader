#!/usr/bin/python3

import sys
import os
import json
import numpy as np
import tensorflow as tf
from keras import Sequential
from keras.layers import Dense, Dropout, Conv1D, MaxPooling1D, CuDNNLSTM
from keras.callbacks import ModelCheckpoint
from keras import backend as K
import subprocess as sp

config = tf.ConfigProto()
config.gpu_options.allow_growth = True
K.set_session(tf.Session(config=config))

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

if len(sys.argv) != 5:
    print('Incorrect number of args!')
    os._exit(1)

NAME = sys.argv[1]
DATA_FILE = sys.argv[2]
TARGET_FILE = sys.argv[3]
MODEL_FOLDER = sys.argv[4]

EPOCHS = 1
BATCH_SIZE = 128

print('loading data...')

X = []
for item in json.load(open(DATA_FILE)):
    X.extend(item)
Y = []
for item in json.load(open(TARGET_FILE)):
    Y.extend(item)

X = np.array(X, dtype='float64')
Y = np.array(Y, dtype='int32')

print('{}, {}'.format(X.shape, Y.shape))
buy = []
sell = []
for y in Y:
    m = np.argmax(y)
    if m == 0:
        buy.append(y)
    elif m == 1:
        sell.append(y)
print('{} buy, {} sell'.format(len(buy), len(sell)))

np.random.seed(648060351)

save_file = MODEL_FOLDER + NAME + ".hdf5"
checkpoint = ModelCheckpoint(save_file, monitor='val_acc', save_best_only=True, verbose=0, mode='max')

model = Sequential()
# model.add(CuDNNLSTM(50, return_sequences=True, input_shape=X[0].shape))
model.add(Conv1D(filters=32, kernel_size=3, activation='relu', input_shape=X[0].shape))
model.add(Conv1D(filters=64, kernel_size=5, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.2))
model.add(CuDNNLSTM(100))
model.add(Dropout(0.2))
model.add(Dense(3, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X, Y, epochs=EPOCHS, batch_size=BATCH_SIZE, validation_split=0.33, callbacks=[checkpoint])

print("Converting model to tensorflow")
sp.run(['python3', 'models/keras/keras_to_tensorflow.py', '-input_model_file', save_file, '-output_model_file', MODEL_FOLDER + NAME + ".pb"], stdout=sp.PIPE)

os.remove(save_file)
